"""data = 42
print(isinstance(data, int))
"""

# ========================================
"""
def my_func(data: list[int, float]) -> float:
    res = sum(data) / len(data)
    return res


print(my_func([2, 5.5, 15, 8.0, 113.74]))
"""
# ========================================
"""
dir(object) - список допустимых атрибутов для объекта
help(str) - справочная информация о строке. (Ex.: методы с аргументами)
"""

# ========================================
"""
help()
keywords
symbols
"""

# ========================================

"""
import sys

STEP = 2 ** 16
num = 1
for _ in range(30):
    print(sys.getsizeof(num), num) # размер, кот.занимает число в оперативке
    num *= STEP
"""

# ==================================
"""
num = 2 ** 16 - 1

b = bin(num) # двоичная
o = oct(num) # восьмеричная
h = hex(num) # шестнадцатиричная
print(b, o, h)
"""
# ==================================
"""
DEFAULT = 42
num = int(input('Введите номер уровня или 0 для значения по умолчанию: '))
level = num or DEFAULT  # Ленивый if - num or истина => дальше уже не выполняется.
print(level)            # Если ввести 0 - автоматом преобразуется в ложь, => 42 (неявное преобразование)
"""

# ===================================
"""
name = input('Привет, как тебя зовут? ')
if name:
    print('Привет, ' + name)
else:
    print('Анонимус, приветствую!') # просто нажать enter, строка отработает как ложь => выведется результат else
"""

# ==================================
# Любая непустая коллекция преобразуется к True
# Любая полная коллекция преобразуется к False
"""
data = [0, 1, 3, 25, 45, 23, 32, 0]
while data:
    print(data.pop()) #.pop() отрезает по одному элементу с конца, одновременно удаляя его из коллекции.
"""

# ======================================
"""
empty_str = ''
print(empty_str.__sizeof__()) # 49 байт занимает строка.
"""
# ============================================
"""
example_str = input('Введите данные: ')

if example_str.isalnum():
    example_str = int(example_str)
    b = bin(example_str)  # двоичная
    o = oct(example_str)  # восьмеричная
    h = hex(example_str)  # шестнадцатиричная
    print(b, o, h)
else:
    print('Текст в ISCII' if example_str.isascii() else 'Tекст не в ISCII')
"""
# =========================================
"""
import math

print(math.pi, math.e, math.inf, math.nan, math.tau, sep='\n')

print(dir(math))
print(help(math.gcd)) # возвращает наибольший общий делитель для переданных чисел.
"""
# ============================================
"""
# Задаем количество символов после запятой.

import decimal

num = decimal.Decimal(5)

decimal.getcontext().prec = 120 # К модулю вызвали функцию и вызвали метод. Выведет число и 120 знаков после запятой.
"""
# ==============================================
"""
import fractions

f1 = fractions.Fraction(1, 3)
print(f1)
f2 = fractions.Fraction(3, 5)
print(f2)
print(f1 * f2)
"""
# =============================================
"""
# Комплексные числа

a = complex(2, 3)
b = complex('2+3j')         # Без пробелов!
print(a, b, a == b, sep='\n')
"""
# ===========================================

x = -42
print(abs(x))

a = 42
b = 5
print(divmod(a, b))

print(pow(a, b))
print(pow(a, b, 10)) # 10 - выводит остаток от деления на 10

print(round(3.141_592_653), 3)
